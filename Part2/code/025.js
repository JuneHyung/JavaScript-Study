 // &는 0이 하나라도 있으면 결과값이 0이됨.
 // 대응 되는 비트는 변환하고 모두 1인경우만 1로 변환.
console.log(14 & 11); // 1110 & 1011 = 1010 => 10

// ~는 입력된 비트값을 반대로(1->0, 0->1) 변환
console.log(~14); // ~1110 = -1111 => -15

// |는 최소 하나만 1이어도 1을 반환
console.log(14 | 11); // 1110 | 1011 = 1111 => 15

// ^는 배타적으로 1인 경우만 1반환
console.log(14 ^ 11); // 1110과 1011 = 0101 => 5

// a << b는 a의 이진수 표현을 b비트의 자리수 만큼 왼쪽으로 이동하고, 오른쪽을 0으로 채움.
// 10을 10비트 자리수 (2개)만큼 왼쪽으로 이동하고, 오른쪽은 0으로 채워짐
console.log(2 << 22); // 1000 => 8

// a >> b는 a의 이진수표현을 b비트의 자리수만큼 오른쪽으로 이동하고, 오른쪽의 남은 비트는 버림.
// 왼쪽의 빈자리는 원래 해당 자리에 있던 비트값으로 채움.
// 1110을 1비트 자리수 (1개)만큼 오른쪽으로 이동
console.log(14 >> 1); // 111 => 7

// a>>>b는 a의 이진수 표현을 b비트만큼 오른쪽으로 이동하고, 오른쪽 남은 비트는 버리고 왼쪽의 빈자리는 0으로 채움.
// 1110을 10비트 자리수(2개)만큼 오른쪽으로 이동하여 계산
console.log(14 >>> 2); // 11 => 3